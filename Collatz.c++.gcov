        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2016
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:
        -:   14:#include "Collatz.h"
        -:   15:
        -:   16:using namespace std;
        -:   17:
        -:   18:// ------------
        -:   19:// collatz_read
        -:   20:// ------------
        -:   21:
function _Z12collatz_readRSiRiS0_ called 6 returned 100% blocks executed 100%
        6:   22:bool collatz_read (istream& r, int& i, int& j) {
        6:   23:    if (!(r >> i))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
        1:   24:        return false;
        5:   25:    r >> j;
call    0 returned 100%
        5:   26:    return true;}
        -:   27:
        -:   28:// ------------
        -:   29:// collatz_eval
        -:   30:// ------------
        -:   31:
function _Z12collatz_evalii called 10 returned 100% blocks executed 96%
       10:   32:int collatz_eval (int i, int j) {
        -:   33:
       10:   34:    if (j < i){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   35:        int temp = i;
    #####:   36:        i = j;
    #####:   37:        j = temp;
        -:   38:    }
        -:   39:
       10:   40:    int cache[100000][2] = {0};
       10:   41:    int z = 0;
       10:   42:    int max_cycle = 0;
        -:   43:
        -:   44:
        -:   45:
      466:   46:    for (int x = i; x <= j && x >= 0; ++x){
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:   47:
        -:   48:        //////////////////////////
        -:   49:
      456:   50:        int c = 1;
      456:   51:        int n = x;
        -:   52:
    50764:   53:        while (n > 1) {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
    25162:   54:            if (n < j && n == cache[n][0]){
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        8:   55:                c += cache[n][1] - 1;
        8:   56:                cout << n << "->" << c << endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
branch 10 taken 100% (fallthrough)
branch 11 taken 0% (throw)
        8:   57:                break;
        -:   58:                }
        -:   59:
    25154:   60:            if ((n % 2) == 0)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
    16875:   61:                n = (n / 2);
        -:   62:            else
     8279:   63:                n = (3 * n) + 1;
        -:   64:            
    25154:   65:            ++c;}
        -:   66:
      456:   67:            cache[z][0] = x;
      456:   68:            cache[z][1] = c;
      456:   69:            ++z;
      456:   70:            cout << "z: " << z << endl;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
        -:   71:        //////////////////////////
        -:   72:
      456:   73:        if(max_cycle < c)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
       47:   74:            max_cycle = c;
        -:   75:    }
        -:   76:
       10:   77:    return max_cycle;}
        -:   78:
        -:   79:// -------------
        -:   80:// collatz_print
        -:   81:// -------------
        -:   82:
function _Z13collatz_printRSoiii called 5 returned 100% blocks executed 100%
        5:   83:void collatz_print (ostream& w, int i, int j, int v) {
        5:   84:    w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:   85:
        -:   86:// -------------
        -:   87:// collatz_solve
        -:   88:// -------------
        -:   89:
function _Z13collatz_solveRSiRSo called 1 returned 100% blocks executed 100%
        5:   90:void collatz_solve (istream& r, ostream& w) {
        -:   91:    int i;
        -:   92:    int j;
        9:   93:    while (collatz_read(r, i, j)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 80% (fallthrough)
branch  4 taken 20%
        4:   94:        const int v = collatz_eval(i, j);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
function _GLOBAL__sub_I__Z12collatz_readRSiRiS0_ called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        8:   95:        collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
