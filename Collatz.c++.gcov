        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2016
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:
        -:   14:#include "Collatz.h"
        -:   15:
        -:   16:using namespace std;
        -:   17:
        -:   18:// ------------
        -:   19:// collatz_read
        -:   20:// ------------
        -:   21:
function _Z12collatz_readRSiRiS0_ called 6 returned 100% blocks executed 100%
        6:   22:bool collatz_read (istream& r, int& i, int& j) {
        6:   23:    if (!(r >> i))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
        1:   24:        return false;
        5:   25:    r >> j;
call    0 returned 100%
        5:   26:    return true;}
        -:   27:
        -:   28://-------------
        -:   29://cycle_length
        -:   30://-------------
function _Z12cycle_lengthi called 503 returned 100% blocks executed 100%
      503:   31:int cycle_length (int n) {
        -:   32:
      503:   33:    int c = 1;
    56059:   34:    while (n > 1) {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
    27778:   35:        if ((n % 2) == 0)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
    18594:   36:            n = (n / 2);
        -:   37:        else
     9184:   38:            n = (3 * n) + 1;
    27778:   39:        ++c;}
        -:   40:
      503:   41:    return c;}
        -:   42:
        -:   43:// ------------
        -:   44:// collatz_eval
        -:   45:// ------------
        -:   46:
function _Z12collatz_evalii called 11 returned 100% blocks executed 91%
       11:   47:int collatz_eval (int i, int j) {
        -:   48:
       11:   49:    if (j < i){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   50:        int temp = i;
    #####:   51:        i = j;
    #####:   52:        j = temp;
        -:   53:    }
        -:   54:
       11:   55:    int max_cycle = 0;
        -:   56:
      923:   57:    for (i; i<=j && i >= 0; ++i){
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
      456:   58:        if(max_cycle < cycle_length(i))
call    0 returned 100%
branch  1 taken 10% (fallthrough)
branch  2 taken 90%
       47:   59:            max_cycle = cycle_length(i);
call    0 returned 100%
        -:   60:    }
        -:   61:
       11:   62:    return max_cycle;}
        -:   63:
        -:   64:// -------------
        -:   65:// collatz_print
        -:   66:// -------------
        -:   67:
function _Z13collatz_printRSoiii called 5 returned 100% blocks executed 100%
        5:   68:void collatz_print (ostream& w, int i, int j, int v) {
        5:   69:    w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:   70:
        -:   71:// -------------
        -:   72:// collatz_solve
        -:   73:// -------------
        -:   74:
function _Z13collatz_solveRSiRSo called 1 returned 100% blocks executed 100%
        5:   75:void collatz_solve (istream& r, ostream& w) {
        -:   76:    int i;
        -:   77:    int j;
        9:   78:    while (collatz_read(r, i, j)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 80% (fallthrough)
branch  4 taken 20%
        4:   79:        const int v = collatz_eval(i, j);
call    0 returned 100%
function _GLOBAL__sub_I__Z12collatz_readRSiRiS0_ called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        8:   80:        collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
